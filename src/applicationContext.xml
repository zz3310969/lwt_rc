<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url"
			value="jdbc:mysql://192.168.0.236:3306/remoteconsulation?characterEncoding=utf-8" />
		<property name="username" value="root" />
		<property name="password" value="root" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<!--定义Hibernate的sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLInnoDBDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<!--prop key="hibernate.hbm2ddl.auto">false</prop -->
				<prop key="hibernate.jdbc.batch_size">20</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>com/bsc/bean/Consultation.hbm.xml</value>
				<value>com/bsc/bean/Consultationdigitalimage.hbm.xml</value>
				<value>com/bsc/bean/Consultationpatientrecord.hbm.xml</value>
				<value>com/bsc/bean/Consultationroom.hbm.xml</value>
				<value>com/bsc/bean/Dictgeneralsectionoffice.hbm.xml</value>
				<value>com/bsc/bean/Dictionary.hbm.xml</value>
				<value>com/bsc/bean/Dictionarytype.hbm.xml</value>
				<value>com/bsc/bean/Digitalimage.hbm.xml</value>
				<value>com/bsc/bean/Functionmodule.hbm.xml</value>
				<value>com/bsc/bean/Functionpage.hbm.xml</value>
				<value>com/bsc/bean/Hospital.hbm.xml</value>
				<value>com/bsc/bean/Hospitalrelation.hbm.xml</value>
				<value>com/bsc/bean/Hospitalsectionoffice.hbm.xml</value>
				<value>com/bsc/bean/Linkmenu.hbm.xml</value>
				<value>com/bsc/bean/Loginlog.hbm.xml</value>
				<value>com/bsc/bean/Operationlog.hbm.xml</value>
				<value>com/bsc/bean/Patient.hbm.xml</value>
				<value>com/bsc/bean/Patientrecord.hbm.xml</value>
				<value>com/bsc/bean/Region.hbm.xml</value>
				<value>com/bsc/bean/Role.hbm.xml</value>
				<value>com/bsc/bean/Roleright.hbm.xml</value>
				<value>com/bsc/bean/Systemuser.hbm.xml</value>
				<value>com/bsc/bean/Userrole.hbm.xml</value>
				<value>com/bsc/bean/Webpage.hbm.xml</value>
				<value>com/bsc/bean/Nation.hbm.xml</value>
			</list>
		</property>
	</bean>

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- 配置事务管理器 指定其作用的sessionFactory把事务交给Spring去处理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	<!--过滤器注入 -->
	<bean id="rightFilter" class="com.bsc.system.filter.RightFilter"
		scope="prototype">
		<property name="webPageService" ref="linkMenuWebPageServiceImpl"></property>
	</bean>
	<tx:advice id="txadvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="on*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="writerLoginLog" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="checkLogin" propagation="REQUIRED"
				read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="daoMethods" expression="execution(* com.bsc.service.*.*(..))" />
		<aop:advisor advice-ref="txadvice" pointcut-ref="daoMethods" />
	</aop:config>

	<bean id="dao" class="com.bsc.util.db.Dao" scope="singleton">
		<constructor-arg index="0" ref="sessionFactory"></constructor-arg>
		<constructor-arg index="1" ref="dataSource"></constructor-arg>
	</bean>
</beans>